import java.util.function.Function

buildscript {
  ext.kotlin_version = '1.1.4-3'
  ext.sourceCompatibility = 1.8
  ext.clientId = 'ktq-gradle'
  ext.projectDescription = 'compiles graphql schemas to kotlin type hierarchies'
  ext.gitBaseUrl = GIT_BASE_URL + '/ktq-gradle'
  ext.projLicenseUrl = "$gitBaseUrl/LICENSE.txt"
  ext.localStaging = "$buildDir/staging/"
  ext.localBintrayStaging = "$buildDir/bintray/"
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
      mavenCentral()
    }
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "com.gradle.publish:plugin-publish-plugin:0.9.7"
  }
}

plugins {
  id 'java'
  id 'java-library'
  id "com.jfrog.bintray" version "1.7.3"
}
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'kotlin'
apply plugin: 'maven-publish'

def getVersion = { Project project ->
  if (project.hasProperty("release") &&
          project.property("release") == "true")
    return "0.2"
  else return "0.2-SNAPSHOT"
}

version = getVersion(rootProject)
group = 'com.prestongarno.ktq'


repositories {
  mavenCentral()
  jcenter()
}

def nonExported = ["org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version",
                   "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"]

dependencies {
  api gradleApi()
  implementation 'com.prestongarno.ktq:ktq-client:0.1'
  implementation "com.squareup:kotlinpoet:0.4.0"
  compileClasspath nonExported
  testCompile gradleTestKit()
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile 'junit:junit:4.12'
  testCompile "org.jetbrains.kotlin:kotlin-test"
  testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
  testRuntimeClasspath nonExported
}

compileKotlin {
  kotlinOptions {
    includeRuntime = false
  }
}

jar {
  manifest {
    attributes('Manifest-Version': '1.0',
            "implementation-class": "${rootProject.group}.compiler.CompilerPlugin"
    )
  }
}

task integrationTest(type: Test) {
  options {
    systemProperties 'com.prestongarno.ktq.compiler.writeFiles': 'true'
  }
}

task jarDoc(type: Jar) {
  doFirst { javadoc }
  from javadoc.outputs.files
  classifier 'javadoc'
  archiveName "$clientId-$version-${classifier}.jar"
}

task jarSource(type: Jar) {
  from(sourceSets.main.allSource)
  from(sourceSets.test.allSource)
  classifier 'sources'
  archiveName = "$clientId-$version-sources.jar"
}

artifacts {
  archives jar
  archives jarDoc
  archives jarSource
}

sourceSets {
  main {
    java { srcDirs = ['src/main/kotlin'] }
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  test {
    java {
      srcDirs = ['src/test/kotlin']
    }
    resources {
      srcDirs = ['src/test/resources']
    }
  }
}

def checkIsRelease = {
  if (rootProject.version.endsWith("SNAPSHOT"))
    throw new StopActionException("Specify '-Prelease=true to run this task") }

publish.dependsOn(tasks.clean)
bintrayUpload.dependsOn(checkIsRelease, tasks.publish)

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId rootProject.group
      artifactId clientId
      from components.java
      artifact jarDoc
      artifact jarSource

      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST
          name clientId
          description projectDescription
          url gitBaseUrl
          organization {
            name DEV_COMPANY
            url DEV_COMPANY_URL
          }
          issueManagement {
            system 'git'
            url "$gitBaseUrl/issues"
          }
          scm {
            url "${gitBaseUrl}.git"
          }
          licenses {
            license {
              name "MIT"
              url "$projLicenseUrl"
              comments "See $projLicenseUrl for more details."
              distribution "$projLicenseUrl"
            }
          }
          developers {
            developer {
              id DEV_URL
              name DEV_NAME
              organization DEV_COMPANY
              organizationUrl DEV_COMPANY_URL
            }
          }
        }
      }
    }
  }
  repositories {
    maven {
      url localStaging
    }
  }
}

bintray {
  user BINTRAY_USER
  key BINTRAY_KEY
  publish = true
  override = true

  pkg {
    repo = 'ktq'
    name = clientId
    desc = projectDescription
    licenses = ['Apache 2.0']
    vcsUrl = "${gitBaseUrl}.git"
    publications = ['mavenJava']
    filesSpec {
      from(localStaging) {
        include "**/*.md5"
      }
      into "/"
      includeEmptyDirs = false
    }
    githubRepo = 'https://github.com/prestongarno/ktq-gradle'
    githubReleaseNotesFile = 'README.md'

    version {
      name = rootProject.version

      gpg {
        sign = true
        passphrase = GMAIL_GPG
      }
      mavenCentralSync {
        sync = true
        user = MAVEN2_USERNAME
        password = MAVEN2_PASSWORD
        close = '0'
      }
    }
  }
}

compileKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}
compileTestKotlin {
  kotlinOptions {
    jvmTarget = "1.8"
  }
}

task checkVersion {
  println("Version is $version")
}
