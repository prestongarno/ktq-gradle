import kotlin.reflect.jvm.internal.impl.builtins.KotlinBuiltIns

buildscript {
  ext.sourceCompatibility = 1.8
  ext.clientId = 'ktq-gradle'
  ext.projectDescription = 'compiles graphql schemas to kotlin type hierarchies'
  ext.gitBaseUrl = GIT_BASE_URL + '/ktq-gradle'
  ext.projLicenseUrl = "$gitBaseUrl/LICENSE.txt"
  ext.localStaging = "$buildDir/staging/"
  ext.localBintrayStaging = "$buildDir/bintray/"
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "com.gradle.publish:plugin-publish-plugin:0.9.7"
  }
}

plugins {
  id 'nebula.kotlin' version '1.1.4-3'
  id 'java'
  id 'java-library'
}

version = 0.1
group = 'com.prestongarno.ktq'


repositories {
  jcenter()
}
dependencies {
  compile gradleApi()
  compile 'com.prestongarno.ktq:ktq-client:0.1'
  compile 'com.squareup:kotlinpoet:0.4.0'
  compile "org.jetbrains.kotlin:kotlin-reflect"
  testCompile gradleTestKit()
  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile 'junit:junit:4.12'
  testCompile "org.jetbrains.kotlin:kotlin-test"
}

compileKotlin {
  includeRuntime false
}

jar {
  manifest {
    attributes('Manifest-Version': '1.0',
            "implementation-class": "${rootProject.group}.compiler.CompilerPlugin"
    )
  }
}

task integrationTest(type: Test) {
  options {
    systemProperties 'com.prestongarno.ktq.compiler.writeFiles': 'true'
  }
}

configurations {
  pub {
    transitive = true
  }
}
task exportApi(type: Copy) {
  from configurations.runtime
  into "$buildDir/exported"
}

task bundle(type: Jar) {
  dependsOn(exportApi)
  from exportApi.destinationDir
  println(exportApi.destinationDir)
  description 'create the distributable plugin'
  destinationDir file('build/pub-build/')
}


artifacts {
  archives bundle
}


sourceSets {
  main {
    java {
      srcDirs = ['src/main/kotlin']
    }
    resources {
      srcDirs = ['src/main/resources']
    }
  }
  test {
    java {
      srcDirs = ['src/test/kotlin']
    }
    resources {
      srcDirs = ['src/test/resources']
    }
  }
}
task configs {
  doLast {
    configurations.all { println(it.name + " resolvable? :$it.canBeResolved") }
  }
}

